<!-- views/home.handlebars -->
<script src="/plugins/jQuery/jquery-2.2.3.min.js"></script>
<!-- Bootstrap 3.3.6 -->
<script src="/bootstrap/js/bootstrap.min.js"></script>
<!-- DataTables -->
<script src="/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="/plugins/datatables/dataTables.bootstrap.min.js"></script>
<!-- SlimScroll -->
<script src="/plugins/slimScroll/jquery.slimscroll.min.js"></script>
<!-- FastClick -->
<script src="/plugins/fastclick/fastclick.js"></script>
<!-- AdminLTE App -->
<script src="/dist/js/app.min.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="/dist/js/demo.js"></script>
<!-- ChartJS 1.0.1 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
{{#if user}}
    <div>
        <!-- Content Header (Page header) -->
        <section class="content-header" >
            <h1>
                AWS-Autoscale + Kubernetes  Dashboard
            </h1>
            <ol class="breadcrumb">
                <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
                <li class="active">Dashboard</li>
            </ol>
        </section>

        <!-- Main content -->
        <section class="content">
            <!-- Info boxes -->

            <div class="row">
                <div class="col-md-12">
                    <div class="box">
                        <div class="box-header with-border">
                            <h3 class="box-title">AWS Instance States</h3>

                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i>
                                </button>

                                <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                            </div>
                        </div>
                        <!-- /.box-header -->
                        <div class="box-body">
                            <div class="row">
                                <div class="col-md-8">
                                  <div class="box-body">
                                    <table id="instanceData"class="table table-bordered table-striped">
                                    </table>
                                  </div>
                                  <div class="overlay" id = "overlayInstanceId">
                                    <i class="fa fa-refresh fa-spin"></i>
                                  </div>
                                    <!-- /.chart-responsive -->
                                </div>
                                <!-- /.col -->
                                <div class="col-md-4">
                                    <p class="text-center">
                                        <strong>Options</strong>
                                    </p>
                                  <table class="table table-bordered text-center">
                                  <tr>
                                    <td>
                                      <a href="/awskubernetes/getUserInfoForDeploy" class="btn btn-block btn-primary">Deploy</a>
                                    </td>
                                  </tr>
                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/tables" class="btn btn-block btn-info">Tables</a>
                                      </td>
                                    </tr>
                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/timelineKubernetes" class="btn btn-block btn-success" style="background-color: sandybrown">Timeline</a>
                                      </td>
                                    </tr>

                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/loadtesthome" class="btn btn-block btn-info">Load Test</a>
                                      </td>
                                    </tr>

                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/terminate" class="btn btn-block btn-success" style="background-color: darkred">Terminate</a>
                                      </td>
                                    </tr>
                                    <tr>
                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/startRecordingData" class="btn btn-block btn-success" >Start Recording Data</a>
                                      </td>
                                    </tr>
                                    <tr>
                                      <td>
                                        <a href="/awskubernetes/stopRecordingData" class="btn btn-block btn-danger" >Stop Recording Data</a>
                                      </td>
                                    </tr>
                                  </table>
                                    <!-- /.progress-group -->
                                </div>
                                <!-- /.col -->
                            </div>
                            <!-- /.row -->
                        </div>
                        <!-- ./box-body -->

                        <!-- /.box-footer -->
                    </div>
                    <!-- /.box -->
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
              <!-- /.box -->
          <div class="row">
            <div class="col-md-12">
              <div class="box box-primary">
                <div class="box-header with-border">
                  <h3 class="box-title">AWS Autoscaling Group States</h3>

                  <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i>
                    </button>

                    <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                  </div>
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                  <div class="row">
                    <div class="col-md-12">
                      <div class="box-body">
                        <table id="autoscalegroupData"class="table table-bordered table-striped">
                        </table>
                      </div>
                      <div class="overlay" id = "overlayAutoscaleId">
                        <i class="fa fa-refresh fa-spin"></i>
                      </div>
                      <!-- /.chart-responsive -->
                    </div>
                  </div>
                  <!-- /.row -->
                </div>
                <!-- ./box-body -->

                <!-- /.box-footer -->
              </div>
              <!-- /.box -->
            </div>

          </div>
          <div class="row">
            <div class="col-md-12">
              <div class="box box-success">
                <div class="box-header with-border">
                  <h3 class="box-title">AWS Load Balancer</h3>

                  <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i>
                    </button>

                    <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                  </div>
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                  <div class="row">
                    <div class="col-md-12">
                      <div class="box-body">
                        <table id="awsloadBalancer"class="table table-bordered table-striped">
                        </table>
                      </div>
                      <div class="overlay" id = "overlayawsloadBalancer">
                        <i class="fa fa-refresh fa-spin"></i>
                      </div>
                      <!-- /.chart-responsive -->
                    </div>
                    <!-- /.col -->
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                </div>
                <!-- ./box-body -->

                <!-- /.box-footer -->
              </div>
              <!-- /.box -->
            </div>

          </div>

          <!-- Main row -->
          <div class="row">
            <!-- Left col -->
            <div class="col-md-12">
              <!-- MAP & BOX PANE -->
              <div class="box box-success">
                <div class="box-header with-border">
                  <h3 class="box-title">Graphs Based upon Past 1 Hour</h3>

                  <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                  </div>
                </div>
                <div class="box-body no-padding">
                  <div class="row">
                    <div class="col-md-12 col-sm-12">
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            AutoScale Instances
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="autoscaleInstances" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayautoscaleInstances">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            AutoScale Group CPU-Utilization
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="linecpuUtilization" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlaylinecpuUtilization">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                    </div>
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                  <h3 class="box-title">Operation-Oriented Metrics</h3>
                  <!-- Wrong-Provisioning Timeshare & Operating Expense -->
                  <div class="row">
                    <div class="col-md-12 col-sm-12">
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            Wrong-Provisioning Timeshare
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="provisioning" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayprovisioning">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            <span id='operatingexpensetitle'>Operating Expense</span>
                          </header>
                          <div class="panel-body text-center">
                            <div style="width: 400px; height: 400px; float: left; position: relative;">
                              <div style="width: 100%; height: 40px; position: absolute; top: 49%; left: 0; margin-top: -20px; line-height:19px; text-align: center; z-index: 999999999999999">
                                <span id='lbloperatingexpense'>0.00$</span>
                              </div>
                            <canvas id="operatingexpense" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayoperatingexpense">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                    </div>
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                  <!-- Resource Scale -->
                  <div class="row">
                    <div class="col-md-12 col-sm-12">
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            Resource Allocation Bounds
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="boundaryscale" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayboundaryscale">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                    </div>
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                  <h3 class="box-title">User-Oriented Metrics</h3>
                  <!-- Average Response Time & Average Latency -->
                  <div class="row">
                    <div class="col-md-12 col-sm-12">
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            Average Response Time
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="averagerespond" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayaveragerespond">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                      <div class="col-lg-6">
                        <section class="panel">
                          <header class="panel-heading">
                            Average Latency
                          </header>
                          <div class="panel-body text-center">
                            <canvas id="averagelatency" height="400" width="500"></canvas>
                          </div>
                        </section>
                        <div class="overlay" id = "overlayaveragelatency">
                          <i class="fa fa-refresh fa-spin"></i>
                        </div>
                      </div>
                    </div>
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                  <!-- Successful Response Count -->
                  <div class="row">
                    <section class="panel">
                      <header class="panel-heading">
                        Successful Response Count
                      </header>
                      <div class="panel-body text-center">
                        <canvas id="responsecount" height="400" width="1000"></canvas>
                      </div>
                    </section>
                    <div class="overlay" id = "overlayresponsecount">
                      <i class="fa fa-refresh fa-spin"></i>
                    </div>
                    <!-- /.col -->
                  </div>
                  <div class="row">
                    <section class="panel">
                      <header class="panel-heading">
                        Error Response Count
                      </header>
                      <div class="panel-body text-center">
                        <canvas id="errorresponsecount" height="400" width="1000"></canvas>
                      </div>
                    </section>
                    <div class="overlay" id = "overlayerrorresponsecount">
                      <i class="fa fa-refresh fa-spin"></i>
                    </div>
                    <!-- /.col -->
                  </div>
                  <!-- /.row -->
                </div>
              </div>
              <!-- /.box-body -->
            </div>
          </div>
        </section>
        <!-- /.content -->
    </div>
    <!-- page script -->
    <script>

    function updateGraph(loadTestName)
    {
        alert(loadTestName);
      $.post(
        "/awskubernetes/getLoadTestData",{
          testName: loadTestName
        },
        function(data) {
          allData = data;

          var ctx = document.getElementById('line').getContext('2d');
          var myChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: allData.requestIndex,
              datasets: [{
                label: 'Request Elapsed Sec',
                data: allData.datarequestElapsed,
                backgroundColor: "rgba(255,153,0,0.6)"
              }]
            }
          });

          var ctxLatency = document.getElementById('lineLatency').getContext('2d');

          var myChartLatency = new Chart(ctxLatency, {
            type: 'line',
            data: {
              labels: allData.requestIndex,
              datasets: [{
                label: 'Max Latency',
                data: allData.maxLatency,
                borderColor: "rgba(255,153,0,0.6)",
                fill: false,
              }, {
                label: 'Min Latency',
                data: allData.minLatency,
                borderColor: "red",
                fill: false,
              },{
                label: 'Mean Latency',
                data: allData.meanLatency,
                borderColor: "#54D",
                fill: false,
              }
              ]
            }
          });

          var ctxLatency = document.getElementById('barRPS').getContext('2d');
          var myChartLatency = new Chart(ctxLatency, {
            type: 'bar',
            data: {
              labels: allData.requestIndex,
              datasets: [{
                label: 'Requests Per Second',
                data: allData.barRPS,
                backgroundColor: "54D"
              }
              ]
            }
          });
          var ctxlatencyTotal = document.getElementById('lineLatencyTotal').getContext('2d');
          var myChartLatencyTotal = new Chart(ctxlatencyTotal, {
            type: 'line',
            data: {
              labels: allData.requestIndex,
              datasets: [{
                label: 'Total Latency Time (in Sec)',
                data: allData.totalTimeSeconds,
                backgroundColor: "#54F5B7"
              }]
            }
          });
          var ctxErrors = document.getElementById('barErrors').getContext('2d');
          var myChartErrors = new Chart(ctxErrors, {
            type: 'bar',
            data: {
              labels: allData.requestIndex,
              datasets: [{
                label: 'Errors',
                data: allData.errors,
                backgroundColor: "#F5C454"
              }
              ]
            }
          });
        }
      );
    }

    $.get(
      "/awskubernetes/describeEc2Instances",
      function(data) {
        //data=JSON.parse(data);
        $("#instanceData").DataTable(data[0]);
        $("#overlayInstanceId").hide("slow");

      }
    );
      $.get(
        "/awskubernetes/describeAwsAutoscaleGroups",
        function(data) {
          //data=JSON.parse(data);
          $("#autoscalegroupData").DataTable(data[0]);
          $("#overlayAutoscaleId").hide("slow");

        }
      );
      $.get(
        "/awskubernetes/describeAwsLoadBalancer",
        function(data) {
          //data=JSON.parse(data);
          $("#awsloadBalancer").DataTable(data[0]);
          $("#overlayawsloadBalancer").hide("slow");

        }
      );

    $(function() {
      function callUpdate(){
        $.get(
          "/awskubernetes/getcurrentData",
          function(data) {
            //data=JSON.parse(data);
            var instancesDataArr = data.instances.Datapoints;
            instancesDataArr.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });

            var instancecost = 0.0134;
            var max = 0;
            var min = 100;
            var costs = 0;
            var overprovisiongCosts = 0;
            var underprovisiongCosts = 0;

            var timestamparr = [];
            var valuearr = [];
            for(i=0;i<instancesDataArr.length; i++) {
              if (instancesDataArr[i].Average > max) {
                max = instancesDataArr[i].Average;
              }
              if (instancesDataArr[i].Average < min) {
                min = instancesDataArr[i].Average;
              }
              timestamparr.push(instancesDataArr[i].Timestamp);
              valuearr.push(instancesDataArr[i].Average);
              costs = costs + instancesDataArr[i].Average;
            }

            min = Math.min(max, min)

            var cpuUtilizationDataArr = data.cpuUtilization.Datapoints;
            var timestamparrCPUUti = [];
            var valuearrCPUUTI = [];
            cpuUtilizationDataArr.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });
            for(i=0;i<cpuUtilizationDataArr.length; i++) {
              timestamparrCPUUti.push(cpuUtilizationDataArr[i].Timestamp);
              valuearrCPUUTI.push(cpuUtilizationDataArr[i].Average);
            }

            var desiredInstancesDataArr = data.desiredInstances.Datapoints;
            var inServiceInstancesDataArr = data.inserviceInstances.Datapoints;
            var valueoverprovisioning = [];
            var valueunderprovisioning = [];
            var valueinService = [];
            var valuedesired = [];

            desiredInstancesDataArr.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });

            inServiceInstancesDataArr.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });


            for(i=0;i<desiredInstancesDataArr.length; i++) {
              // How many machines do we have vs how many do we need?
              var diff = desiredInstancesDataArr[i].Average - inServiceInstancesDataArr[i].Minimum;
              var diff_over = desiredInstancesDataArr[i].Average - instancesDataArr[i].Average;
              if (diff > 0) {
                valueunderprovisioning.push(Math.abs(inServiceInstancesDataArr[i].Minimum + diff)); // Too few
                underprovisiongCosts = underprovisiongCosts + 1;
                if (i > 0 && isNaN(valueunderprovisioning[i-1])) {
                  valueunderprovisioning[i-1] = inServiceInstancesDataArr[i-1].Minimum;
                }
                valueoverprovisioning.push(NaN);
              }
              else if (diff_over < 0) {
                valueoverprovisioning.push(instancesDataArr[i].Average); // Too many
                overprovisiongCosts = overprovisiongCosts + 1;
                if (i > 0 && isNaN(valueoverprovisioning[i-1])) {
                  valueoverprovisioning[i-1] = inServiceInstancesDataArr[i-1].Minimum;
                }
                valueunderprovisioning.push(NaN);
              }
              else {
                // Neither
                if (i > 0 && (desiredInstancesDataArr[i-1].Average - inServiceInstancesDataArr[i-1].Minimum) > 0) {
                  valueunderprovisioning[i] = inServiceInstancesDataArr[i].Minimum;
                }
                else {
                  valueunderprovisioning.push(NaN);
                }
                if (i > 0 && (desiredInstancesDataArr[i-1].Average - instancesDataArr[i-1].Average) < 0) {
                  valueoverprovisioning[i] = instancesDataArr[i].Average;
                }
                else {
                  valueoverprovisioning.push(NaN);
                }
              }
              valueinService.push(inServiceInstancesDataArr[i].Minimum);
              valuedesired.push(desiredInstancesDataArr[i].Average);
            }

            var totalcosts = (costs*(instancecost/60)).toFixed(2);
            totalcosts = Math.max(totalcosts, 0.01);

            document.getElementById("lbloperatingexpense").textContent=`<b>${totalcosts}\$</b>`;

            var valuesuccessfulData = data.HTTPCode2XXCount.Datapoints;
            var valuesuccessful = [];
            valuesuccessfulData.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });

            for(i=0;i<valuesuccessfulData.length; i++) {
              valuesuccessful.push(valuesuccessfulData[i].Sum);
            }

            var valuetotalData = data.totalRequestCount.Datapoints;
            var valuetotalresponses = [];

            valuetotalData.sort(function(a, b) {
              var aD = new Date(a.Timestamp).getTime(), bD = new Date(b.Timestamp).getTime();
              return (aD) - (bD);
            });

            for(i=0;i<valuetotalData.length; i++) {
              valuetotalresponses.push(valuetotalData[i].Sum);
            }

            var valueerror300 = [];
            var valueerror400 = [];
            var valueerror500 = [];
            var valueresponsetime = [];
            var valuelatency = [];

            var ctx = document.getElementById('autoscaleInstances').getContext('2d');
            var myChart = new Chart(ctx, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Auto Scale Instances',
                  data: valuearr,
                  backgroundColor: "red",
                  fill: false,
                  steppedLine: true,
                  lineTension: 0
                }],
              },
              options: {
                scales: {
                  yAxes: [{
                    ticks: {
                      suggestedMax: (max + 2),
                      beginAtZero: true
                    }
                  }]
                }
              }
            });
            $("#overlayautoscaleInstances").hide("slow");
            var ctxLatency = document.getElementById('linecpuUtilization').getContext('2d');
            var myChartLatency = new Chart(ctxLatency, {
              type: 'line',
              data: {
                labels: timestamparrCPUUti,
                datasets: [{
                  label: 'CPU-Utilization',
                  data: valuearrCPUUTI,
                  backgroundColor: "blue",
                  fill: false,
                  steppedLine: true,
                  lineTension: 0
                }],
              },
              options: {
                scales: {
                  yAxes: [{
                    ticks: {
                      suggestedMax: 100,
                      beginAtZero: true
                    }
                  }]
                }
              }
            });
            $("#overlaylinecpuUtilization").hide("slow");
            var ctxProvisioning = document.getElementById('provisioning').getContext('2d');
            var myChartProvisioning = new Chart(ctxProvisioning, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Under-Provisioned',
                  data: valueunderprovisioning,
                  borderColor: "#36A2EB",
                  fill: origin,
                  steppedLine: true,
                  spanGaps: true,
                  lineTension: 0
                },{
                  label: 'Over-Provisioned',
                  data: valueoverprovisioning,
                  borderColor: "#FF6384",
                  fill: origin,
                  steppedLine: true,
                  spanGaps: true,
                  lineTension: 0
                }, {
                  label: 'In-Service Instances',
                  data: valueinService,
                  backgroundColor: "grey",
                  borderColor: "green",
                  steppedLine: true,
                  fill: false,
                  lineTension: 0,
                  borderDash: [5, 5]
                },{
                  label: 'AutoScale Instances',
                  data: valuearr,
                  backgroundColor: "grey",
                  borderColor: "#06eba1",
                  steppedLine: true,
                  fill: false,
                  lineTension: 0
                }, {
                  label: 'Desired Instances',
                  data: valuedesired,
                  backgroundColor: "grey",
                  borderColor: "green",
                  steppedLine: true,
                  fill: false,
                  lineTension: 0
                }
                ]
              },
              options: {
                scales: {
                  yAxes: [{
                    ticks: {
                      suggestedMax: (max + 2),
                      beginAtZero: true
                    }
                  }]
                }
              }
            });
            $("#overlayprovisioning").hide("slow");
            var ctxBoundaryscale = document.getElementById('boundaryscale').getContext('2d');
            var myChartBoundaryscale = new Chart(ctxBoundaryscale, {
              type: 'bar',
              data: {
                  labels: ['Resource Allocation Bounds'],
                  datasets: [{
                    label: 'Lower Bound',
                    backgroundColor: "#36A2EB",
                    borderColor: "#295deb",
                    borderWidth: 1,
                    data: [min]
                  }, {
                    label: 'Upper Bound',
                    backgroundColor: "#06eba1",
                    borderColor: "#00eb3d",
                    borderWidth: 1,
                    data: [max]
                  }, {
                    label: 'Boundary Scale',
                    backgroundColor: "#FF6384",
                    borderColor: "#ff0008",
                    borderWidth: 1,
                    data: [Math.abs(max-min)]
                  }]
              },
              options: {
                scales: {
                  yAxes: [{
                    ticks: {
                      suggestedMax: (max + 2),
                      beginAtZero: true
                    }
                  }]
                }
              }
            });
            $("#overlayboundaryscale").hide("slow");
            var ctxOperatingexpense = document.getElementById('operatingexpense').getContext('2d');
            var myChartOperatingexpense = new Chart(ctxOperatingexpense, {
              type: 'doughnut',
              data: {
                labels: [
                  'CPU-Minutes',
                  'Over-Provisioned CPU-Minutes',
                  'Under-Provisioned CPU-Minutes'
                ],
                datasets: [{
                  data: [costs, overprovisiongCosts, underprovisiongCosts],
                  backgroundColor: [
                    "#06eba1",
                    "#FF6384",
                    "#36A2EB"
                  ],
                  borderColor: "grey",
                  fill: true
                }]
              }
            });
            $("#overlayoperatingexpense").hide("slow");
            var ctxAveragerespond = document.getElementById('averagerespond').getContext('2d');
            var myChartAveragerespond = new Chart(ctxAveragerespond, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Average Response Time',
                  data: valueresponsetime,
                  borderColor: "blue",
                  fill: false
                }]
              }
            });
            $("#overlayaveragerespond").hide("slow");
            var ctxAveragelatency = document.getElementById('averagelatency').getContext('2d');
            var myChartAveragelatency = new Chart(ctxAveragelatency, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Average Latency',
                  data: valuelatency,
                  borderColor: "blue",
                  fill: false
                }
                ]
              }
            });
            $("#overlayaveragelatency").hide("slow");
            var ctxResponsecount = document.getElementById('responsecount').getContext('2d');
            var myChartResponsecount = new Chart(ctxResponsecount, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Successful Response (2XX)',
                  data: valuesuccessful,
                  borderColor: "green",
                  fill: origin
                },{
                  label: 'Total Responses',
                  data: valuetotalresponses,
                  borderColor: "grey",
                  fill: origin
                }],
                options: {
                  scales: {
                    yAxes: [{
                      ticks: {
                        //suggestedMax: 100,
                        beginAtZero: true
                      }
                    }]
                  }
                }
              }
            });
            $("#overlayresponsecount").hide("slow");
            var ctxErrorResponsecount = document.getElementById('errorresponsecount').getContext('2d');
            var myChartErrorResponsecount = new Chart(ctxErrorResponsecount, {
              type: 'line',
              data: {
                labels: timestamparr,
                datasets: [{
                  label: 'Error Response (3XX)',
                  data: valueerror300,
                  borderColor: "#ff9400",
                  fill: origin
                },{
                  label: 'Error Response (4XX)',
                  data: valueerror400,
                  borderColor: "#fffa00",
                  fill: origin
                },{
                  label: 'Error Response (5XX)',
                  data: valueerror500,
                  borderColor: "#ff0500",
                  fill: origin
                },{
                  label: 'Total Responses',
                  data: valuetotalresponses,
                  borderColor: "grey",
                  fill: origin
                }]
              },
              options: {
                scales: {
                  yAxes: [{
                    stacked: true,
                    scaleLabel: {
                      display: true,
                      labelString: 'Value'
                    },
                    ticks: {
                      //suggestedMax: 100,
                      beginAtZero: true
                    }
                  }]
                }
              }
            });
            $("#overlayerrorresponsecount").hide("slow");
          });
      }
      callUpdate();
      setInterval(callUpdate, 60000);
    });
    </script>

{{else}}
  <div style="height: 600px">
      <h1>Welcome to Autoscaling Performance Measurement Tool</h1>
    <p>Please Sign in and to continue!</p>
    <p>
      <a href="/signin" class="btn btn-primary btn-lg" role="button">
        <span class="glyphicon glyphicon-user"></span>
        Sign in!
      </a>
    </p>
  </div>

{{/if}}

