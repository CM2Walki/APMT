<script src="plugins/jQuery/jquery-2.2.3.min.js"></script>
<!-- Bootstrap 3.3.6 -->
<script src="bootstrap/js/bootstrap.min.js"></script>
<!-- AdminLTE App -->
<script src="dist/js/app.min.js"></script>
<script src="plugins/sparkline/jquery.sparkline.min.js"></script>
<!-- jvectormap -->
<script src="plugins/jvectormap/jquery-jvectormap-1.2.2.min.js"></script>
<script src="plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
<!-- ChartJS 1.0.1 -->
<script src="plugins/chartjs/Chart.min.js"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
{{#if user}}
  <div>
    <section class="content-header">
      <h1>
       Kubernetes AWS Auto-Scaling Solution Deployment Configuration
      </h1>
      <ol class="breadcrumb">
        <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Kubernetes AWS</li>
      </ol>
    </section>
  <section class="content">
  <div class="row">
    <div class="col-xs-12">
      <div class="box">
        <form role="form" action="/kubernetes/deploykubernetesaws" method="post">
        <div class="box-body">
          <table id="example2" class="table table-bordered table-hover">
            <thead>
            <tr>
              <th>#</th>
              <th>Field</th>
              <th>Value</th>
            </tr>
            </thead>
            <tbody>
            <tr>
              <td>1</td>
              <th>Name</th>
              <td><input type="text" class="form-control" name="name" value={{toJSONname info}}></td>
            </tr>
            <tr>
              <td>2</td>
              <th>AWS Access Key ID</th>
              <td><input type="text" class="form-control" name="awstoken" value={{toJSONawstoken info}}></td>
            </tr>
            <tr>
              <td>3</td>
              <th>AWS Secret Access Key</th>
              <td><input type="text" class="form-control" name="awssecret" value={{toJSONawssecret info}}></td>
            </tr>
            <tr>
              <td>4</td>
              <th>AWS Key Name</th>
              <td><input type="text" class="form-control" name="awskeyname" value={{toJSONawskeyname info}}></td>
            </tr>
            <tr>
              <td>5</td>
              <th>AWS Region</th>
              <td><input type="text" class="form-control" name="awsregion" value={{toJSONawsregion info}}></td>
            </tr>
            <tr>
              <td>6</td>
              <th>AWS Subnet Id</th>
              <td><input type="text" class="form-control" name="awssubnetid" value={{toJSONawssubnetid info}}></td>
            </tr>
            <tr>
              <td>7</td>
              <th>AWS Security Id</th>
              <td><input type="text" class="form-control" name="awssecurityid" value={{toJSONawssecurityid info}}></td>
            </tr>
            <tr>
              <td>8</td>
              <th>S3-Bucket Name</th>
              <td><input type="text" class="form-control" name= "s3bucketname" value="passmasteriptominions"></td>
            </tr>
            <tr>
              <td>9</td>
              <th>Number of Master</th>
              <td><input class="form-control" name= "numInstMaster" type="number" min="1" max="1" step="1" value ="1"/></td>
            </tr>
            <tr>
              <td>10</td>
              <th>Master Instance Type</th>
              <td> <select name="typeInstMaster" class="form-control">
                <option>t2.micro</option>
                <option>t2.small</option>
                <option>t2.medium</option>
              </select></td>
            </tr>
            <tr>
              <td>11</td>
              <th>Number of Minions</th>
              <td><input class="form-control" name= "numInstMinion" type="number" min="1" max="3" step="1" value ="1"/></td>
            </tr>
            <tr>
              <td>12</td>
              <th>Minion Instance Type</th>
              <td><select name="typeInstMinion" class="form-control">
                <option>t2.micro</option>
                <option>t2.small</option>
                <option>t2.medium</option>
              </select></td>
            </tr>
            <tr>
              <td>13</td>
              <th>Auto Scaling Parameter</th>
              <td><select name="scalingParam" class="form-control">
                <option>CPU Usage</option>
              </select></td>
            </tr>
            <tr>
              <td>14</td>
              <th>CPU Percentage To Scale After</th>
              <td><input class="form-control" name= "cpuPercent" type="number" min="10" max="100" step="5" value ="10"/></td>
            </tr>
            <tr>
              <td>15</td>
              <th>Minimum Pods:</th>
              <td><input class="form-control" name= "numMinPods" type="number" min="1" max="3" step="1" value ="1"/></td>
            </tr>
            <tr>
              <td>16</td>
              <th>Max Pods:</th>
              <td><input class="form-control" name= "numMaxPods" type="number" min="1" max="10" step="1" value ="1"/></td>
            </tr>
            <tr>
              <td>17</td>
              <th>AMI</th>
              <td><input type="text" class="form-control" name= "imageid" value="ami-027583e616ca104df" ></td>
            </tr>
            </tbody>

          </table>
        </div>
        <!-- /.box-body -->
          <td><input type="submit" class="btn btn-block btn-primary" value="Deploy"></td>
        </form>
      </div>
    </div>
  </div>
  </section>
    <!-- /.col-lg-12 -->

    <!-- Main content -->
    <!-- /.content -->
  </div>



  <!-- AdminLTE for demo purposes -->
  <!-- page script -->

  <script>
    $(function () {
      /* ChartJS
       * -------
       * Here we will create a few charts using ChartJS
       */

      //--------------
      //- AREA CHART -
      //--------------
      function httpGet(theUrl)
      {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", theUrl, false ); // false for synchronous request
        xmlHttp.send( null );
        return xmlHttp.responseText;
      }
      // Get context with jQuery - using jQuery's .get() method.
      var areaChartCanvas = $("#areaChart").get(0).getContext("2d");
      // This will get the first returned node in the jQuery collection.
      var areaChart = new Chart(areaChartCanvas);

      var areaChartData =JSON.parse(httpGet("/products_in_companies"));

      var areaChartOptions = {
        //Boolean - If we should show the scale at all
        showScale: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.3,
        //Boolean - Whether to show a dot for each point
        pointDot: false,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a color
        datasetFill: true,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
        //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: true,
        //Boolean - whether to make the chart responsive to window resizing
        responsive: true
      };

      //Create the line chart
      areaChart.Line(areaChartData, areaChartOptions);

      //-------------
      //- LINE CHART -
      //--------------
      var lineChartCanvas = $("#lineChart").get(0).getContext("2d");
      var lineChart = new Chart(lineChartCanvas);
      var lineChartOptions = areaChartOptions;
      lineChartOptions.datasetFill = false;
      lineChart.Line(areaChartData, lineChartOptions);

      //-------------
      //- PIE CHART -
      //-------------

      // Get context with jQuery - using jQuery's .get() method.
      var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
      var pieChart = new Chart(pieChartCanvas);
      var PieData =JSON.parse(httpGet("/branches_in_company"));
      console.log(PieData);
      var pieOptions = {
        //Boolean - Whether we should show a stroke on each segment
        segmentShowStroke: true,
        //String - The colour of each segment stroke
        segmentStrokeColor: "#fff",
        //Number - The width of each segment stroke
        segmentStrokeWidth: 2,
        //Number - The percentage of the chart that we cut out of the middle
        percentageInnerCutout: 50, // This is 0 for Pie charts
        //Number - Amount of animation steps
        animationSteps: 100,
        //String - Animation easing effect
        animationEasing: "easeOutBounce",
        //Boolean - Whether we animate the rotation of the Doughnut
        animateRotate: true,
        //Boolean - Whether we animate scaling the Doughnut from the centre
        animateScale: false,
        //Boolean - whether to make the chart responsive to window resizing
        responsive: true,
        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: true,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>",
      };
      //Create pie or douhnut chart
      // You can switch between pie and douhnut using the method below.
      pieChart.Doughnut(PieData, pieOptions);

      //-------------
      //- BAR CHART -
      //-------------
      var barChartCanvas = $("#barChart").get(0).getContext("2d");
      var barChart = new Chart(barChartCanvas);
      var barChartData = areaChartData;
      barChartData.datasets[1].fillColor = "#00a65a";
      barChartData.datasets[1].strokeColor = "#00a65a";
      barChartData.datasets[1].pointColor = "#00a65a";
      var barChartOptions = {
        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - If there is a stroke on each bar
        barShowStroke: true,
        //Number - Pixel width of the bar stroke
        barStrokeWidth: 2,
        //Number - Spacing between each of the X value sets
        barValueSpacing: 5,
        //Number - Spacing between data sets within X values
        barDatasetSpacing: 1,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
        //Boolean - whether to make the chart responsive
        responsive: true,
        maintainAspectRatio: true
      };

      barChartOptions.datasetFill = false;
      barChart.Bar(barChartData, barChartOptions);
    });
  </script>
{{else}}
  <div style="height: 600px">
    <h1>Welcome to ScaleX</h1>
    <p>Please sign in to continue!</p>
    <p>
      <a href="/signin" class="btn btn-primary btn-lg" role="button">
        <span class="glyphicon glyphicon-user"></span>
        Sign in!
      </a>
    </p>
  </div>

{{/if}}


